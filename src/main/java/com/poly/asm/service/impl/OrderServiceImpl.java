package com.poly.asm.service.impl;

import com.poly.asm.dao.*;
import com.poly.asm.entity.*;
import com.poly.asm.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class OrderServiceImpl implements OrderService {

    @Autowired private OrderRepository orderRepository;
    @Autowired private OrderDetailRepository orderDetailRepository;
    @Autowired private CartItemRepository cartItemRepository;
    @Autowired private ProductVariantRepository productVariantRepository;
    @Autowired private UserRepository userRepository;
    @Autowired private AddressRepository addressRepository;

    // üü© T·∫°o ƒë∆°n h√†ng m·ªõi
    @Override
    public Order createOrder(Integer userId, Integer addressId) {
        List<CartItem> cartItems = cartItemRepository.findByCustomerId(userId);
        if (cartItems.isEmpty()) {
            throw new RuntimeException("Gi·ªè h√†ng tr·ªëng!");
        }

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User kh√¥ng t·ªìn t·∫°i!"));

        Address address = addressRepository.findById(addressId)
                .orElseThrow(() -> new RuntimeException("ƒê·ªãa ch·ªâ kh√¥ng t·ªìn t·∫°i!"));

        Order order = new Order();
        order.setCustomer(user);
        order.setShippingAddress(address);
        order.setOrderDate(new Date());
        order.setStatus("Ch·ªù duy·ªát");
        order.setPaymentMethod("COD");

        Order savedOrder = orderRepository.save(order);

        for (CartItem cartItem : cartItems) {
            ProductVariant variant = cartItem.getProductVariant();

            if (variant.getQuantity() < cartItem.getQuantity()) {
                throw new RuntimeException("S·∫£n ph·∫©m '" + variant.getProduct().getName()
                        + "' (Size: " + variant.getSize().getName()
                        + ", M√†u: " + variant.getColor().getName() + ") kh√¥ng ƒë·ªß h√†ng!");
            }

            // Tr·ª´ kho
            variant.setQuantity(variant.getQuantity() - cartItem.getQuantity());
            productVariantRepository.save(variant);

            // T·∫°o chi ti·∫øt ƒë∆°n h√†ng
            OrderDetail detail = new OrderDetail();
            detail.setOrder(savedOrder);
            detail.setProductVariant(variant);
            detail.setQuantity(cartItem.getQuantity());
            detail.setPrice(variant.getPrice());
            orderDetailRepository.save(detail);
        }

        // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t
        cartItemRepository.deleteByCustomerId(userId);

        return savedOrder;
    }

    // üü© L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa 1 user (ƒë√£ fetch chi ti·∫øt)
    @Override
    @Transactional(readOnly = true)
    public List<Order> findByUserId(Integer userId) {
        return orderRepository.findByCustomerIdWithDetails(userId);
    }

    // üü© L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (admin)
    @Override
    @Transactional(readOnly = true)
    public List<Order> findAllOrders() {
        return orderRepository.findAll();
    }

    // üü© C·∫≠p nh·∫≠t tr·∫°ng th√°i
    @Override
    public Order updateOrderStatus(Integer orderId, String status) {
        Order order = findById(orderId);
        order.setStatus(status);
        return orderRepository.save(order);
    }

    // üü© T√¨m theo ID
    @Override
    @Transactional(readOnly = true)
    public Order findById(Integer id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + id));
    }

    // üü© X√≥a ƒë∆°n h√†ng (v√† c√°c chi ti·∫øt li√™n quan)
    @Override
    public void deleteById(Integer id) {
        if (!orderRepository.existsById(id)) {
            throw new RuntimeException("ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!");
        }
        orderDetailRepository.deleteByOrderId(id);
        orderRepository.deleteById(id);
    }

    // üü© T√¨m ƒë∆°n h√†ng theo ID v√† User (d√πng trong /order/detail/{id})
    @Override
    @Transactional(readOnly = true)
    public Optional<Order> findByIdAndUserId(Integer orderId, Integer userId) {
        return orderRepository.findByIdAndCustomerIdWithDetails(orderId, userId);
    }

    // üü© T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    @Override
    public BigDecimal calculateTotal(Order order) {
        if (order == null || order.getOrderDetails() == null) {
            return BigDecimal.ZERO;
        }

        return order.getOrderDetails()
                .stream()
                .map(detail -> detail.getTotal() == null ? BigDecimal.ZERO : detail.getTotal())
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

}
